import axios from 'axios';
import logger from '../utils/logger.js';
import { VideoProductionError } from '../utils/error-handler.js';
import fs from 'fs/promises';
import path from 'path';

/**
 * Step 6: Video Production
 * Uses Synthesia API to generate AI avatar videos
 */
export class VideoProductionStep {
  constructor(config) {
    this.config = config;
    this.apiKey = config.env.synthesia.apiKey;
    this.endpoint = config.env.synthesia.endpoint;
    this.outputDir = path.join(process.cwd(), 'output', 'videos');
  }

  /**
   * Execute video production
   */
  async execute(script, topicData) {
    try {
      logger.info('Starting video production...', {
        persona: script.persona,
        duration: script.estimatedDuration
      });

      // Ensure output directory exists
      await fs.mkdir(this.outputDir, { recursive: true });

      // Get persona configuration
      const persona = this.config.personas[script.persona];
      if (!persona) {
        throw new Error(`Persona not found: ${script.persona}`);
      }

      // Create video using Synthesia API
      const videoId = await this.createVideo(script, persona);

      // Poll for video completion
      const videoUrl = await this.pollVideoStatus(videoId);

      // Download video
      const videoPath = await this.downloadVideo(videoUrl, videoId);

      logger.info('Video production completed successfully', {
        videoId,
        videoPath
      });

      return {
        videoId,
        videoPath,
        videoUrl,
        persona: script.persona,
        duration: script.estimatedDuration,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      logger.error('Video production failed', { error: error.message });
      throw new VideoProductionError('Failed to produce video', error);
    }
  }

  /**
   * Create video via Synthesia API
   */
  async createVideo(script, persona) {
    try {
      const response = await axios.post(
        `${this.endpoint}/videos`,
        {
          test: false, // Set to false for production
          input: [
            {
              avatarSettings: {
                avatarId: persona.synthesia_avatar_id,
                style: 'professional',
                seamless: true
              },
              backgroundSettings: {
                videoSettings: {
                  shortBackgroundContentMatchMode: 'freeze',
                  longBackgroundContentMatchMode: 'trim'
                }
              },
              scriptText: script.text,
              voice: {
                provider: 'azure',
                voiceId: 'ar-AE-FatimaNeural', // Emirati Arabic female voice
                speed: 1.0
              }
            }
          ],
          title: `Seekapa - ${script.topic}`,
          description: `${script.contentType} video generated by Seekapa automation`,
          visibility: 'private',
          aspectRatio: '16:9'
        },
        {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        }
      );

      const videoId = response.data.id;
      logger.info('Video creation initiated', { videoId });

      return videoId;
    } catch (error) {
      logger.error('Synthesia video creation failed', {
        error: error.response?.data || error.message
      });
      throw error;
    }
  }

  /**
   * Poll video status until complete
   */
  async pollVideoStatus(videoId, maxAttempts = 60, intervalMs = 10000) {
    logger.info('Polling video status...', { videoId, maxAttempts });

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const response = await axios.get(
          `${this.endpoint}/videos/${videoId}`,
          {
            headers: {
              'Authorization': `Bearer ${this.apiKey}`
            },
            timeout: 10000
          }
        );

        const status = response.data.status;
        logger.debug(`Video status: ${status} (attempt ${attempt}/${maxAttempts})`);

        if (status === 'complete') {
          const videoUrl = response.data.download;
          logger.info('Video generation complete', { videoId, videoUrl });
          return videoUrl;
        } else if (status === 'failed' || status === 'error') {
          throw new Error(`Video generation failed with status: ${status}`);
        }

        // Wait before next poll
        await this.delay(intervalMs);
      } catch (error) {
        if (error.message.includes('failed')) {
          throw error;
        }
        logger.warn(`Polling attempt ${attempt} failed`, { error: error.message });

        if (attempt === maxAttempts) {
          throw new Error('Video generation timeout - max polling attempts reached');
        }

        await this.delay(intervalMs);
      }
    }

    throw new Error('Video generation timeout');
  }

  /**
   * Download video from Synthesia
   */
  async downloadVideo(videoUrl, videoId) {
    try {
      logger.info('Downloading video...', { videoUrl });

      const response = await axios.get(videoUrl, {
        responseType: 'arraybuffer',
        timeout: 120000 // 2 minutes
      });

      const timestamp = Date.now();
      const filename = `seekapa_${videoId}_${timestamp}.mp4`;
      const filePath = path.join(this.outputDir, filename);

      await fs.writeFile(filePath, response.data);

      logger.info('Video downloaded successfully', {
        filePath,
        size: `${(response.data.length / 1024 / 1024).toFixed(2)} MB`
      });

      return filePath;
    } catch (error) {
      logger.error('Video download failed', { error: error.message });
      throw error;
    }
  }

  /**
   * Delay helper
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

export default VideoProductionStep;
